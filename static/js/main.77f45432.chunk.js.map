{"version":3,"sources":["App.js","serviceWorker.js","redux/reducers/spans.js","redux/reducers/index.js","index.js"],"names":["connect","state","spans","dispatch","onAddSpan","spanProps","type","payload","onDeleteSpan","onChangeSpan","props","useState","color","setColor","bgColor","setBgColor","fontsize","setFontsize","inputText","setInputText","spanId","setSpanId","selection","e","target","name","value","console","log","className","noValidate","autoComplete","onSubmit","preventDefault","bgcolor","text","id","Date","valueOf","alert","InputLabel","Select","labelId","onChange","defaultValue","MenuItem","TextField","label","Button","variant","onClick","map","index","key","style","backgroundColor","fontSize","marginRight","spanid","JSON","stringify","Boolean","window","location","hostname","match","initialState","checkArrays","firstIndex","secondIndex","firstElem","secondElem","splice","combineReducers","action","newState","concat","push","length","indexOf","findIndex","s","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77f45432.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction App(props) {\r\n  const [color, setColor] = useState(\"red\");\r\n  const [bgColor, setBgColor] = useState(\"red\");\r\n  const [fontsize, setFontsize] = useState(14);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [spanId, setSpanId] = useState(0);\r\n\r\n  function selection(e) {\r\n    switch (e.target.name) {\r\n      case \"color\":\r\n        setColor(e.target.value);\r\n        break;\r\n      case \"font\":\r\n        setFontsize(e.target.value);\r\n        break;\r\n      case \"bg\":\r\n        setBgColor(e.target.value);\r\n        break;\r\n      default:\r\n        console.log(\"No data!\");\r\n    }\r\n  }\r\n\r\n  function formSubmit(e) {\r\n    e.preventDefault();\r\n    if (!inputText) {\r\n      alert(\"Enter some text!\");\r\n      return;\r\n    }\r\n    props.onAddSpan({\r\n      color: color,\r\n      bgcolor: bgColor,\r\n      fontsize: +fontsize,\r\n      text: inputText,\r\n      id: new Date().valueOf(),\r\n    });\r\n    setInputText(\"\");\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setInputText(e.target.value);\r\n  }\r\n\r\n  function spanSelect(e) {\r\n    setSpanId(e);\r\n  }\r\n\r\n  function changeSpan() {\r\n    if (spanId) {\r\n      props.onChangeSpan({\r\n        color: color,\r\n        bgcolor: bgColor,\r\n        fontsize: +fontsize,\r\n        text: inputText,\r\n        id: spanId,\r\n      });\r\n    } else {\r\n      alert(\"Choose text to change!\");\r\n    }\r\n  }\r\n\r\n  function deleteSpan() {\r\n    if (spanId) {\r\n      props.onDeleteSpan(spanId);\r\n      setSpanId(0);\r\n    } else {\r\n      alert(\"Choose text to delete!\");\r\n    }\r\n  }\r\n\r\n  function getJson() {\r\n    console.log(JSON.stringify(props.spans));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Text editor</h1>\r\n      <h5>\r\n        To change/delete span, select params, then click on it and press button\r\n      </h5>\r\n      <form noValidate autoComplete=\"off\" onSubmit={formSubmit}>\r\n        <InputLabel id=\"label\">Color</InputLabel>\r\n        <Select\r\n          labelId=\"label\"\r\n          id=\"selectColor\"\r\n          onChange={selection}\r\n          name=\"color\"\r\n          defaultValue=\"red\"\r\n          value={color}\r\n        >\r\n          <MenuItem value=\"red\">Red</MenuItem>\r\n          <MenuItem value=\"green\">Green</MenuItem>\r\n          <MenuItem value=\"blue\">Blue</MenuItem>\r\n          <MenuItem value=\"black\">Black</MenuItem>\r\n          <MenuItem value=\"white\">White</MenuItem>\r\n        </Select>\r\n        <InputLabel id=\"bg\">Bg color</InputLabel>\r\n        <Select\r\n          labelId=\"bg\"\r\n          id=\"selectBg\"\r\n          onChange={selection}\r\n          name=\"bg\"\r\n          defaultValue=\"red\"\r\n          value={bgColor}\r\n        >\r\n          <MenuItem value=\"red\">Red</MenuItem>\r\n          <MenuItem value=\"green\">Green</MenuItem>\r\n          <MenuItem value=\"blue\">Blue</MenuItem>\r\n          <MenuItem value=\"black\">Black</MenuItem>\r\n          <MenuItem value=\"white\">White</MenuItem>\r\n        </Select>\r\n        <InputLabel id=\"font\">Font size</InputLabel>\r\n        <Select\r\n          labelId=\"font\"\r\n          id=\"selectFontSize\"\r\n          onChange={selection}\r\n          name=\"font\"\r\n          defaultValue=\"18\"\r\n          value={fontsize}\r\n        >\r\n          <MenuItem value=\"12\">12</MenuItem>\r\n          <MenuItem value=\"14\">14</MenuItem>\r\n          <MenuItem value=\"16\">16</MenuItem>\r\n          <MenuItem value=\"18\">18</MenuItem>\r\n          <MenuItem value=\"20\">20</MenuItem>\r\n          <MenuItem value=\"22\">22</MenuItem>\r\n          <MenuItem value=\"24\">24</MenuItem>\r\n        </Select>\r\n        <InputLabel id=\"text\">Text</InputLabel>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          name=\"text\"\r\n          label=\"Enter text\"\r\n          value={inputText}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"buttons\">\r\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n            ADD\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={deleteSpan}>\r\n            DELETE\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"default\" onClick={changeSpan}>\r\n            CHANGE\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className=\"spans\">\r\n        {props.spans.map((text, index) => (\r\n          <span\r\n            key={index}\r\n            style={{\r\n              color: text.color,\r\n              backgroundColor: text.bgcolor,\r\n              fontSize: text.fontsize,\r\n              marginRight: \"5px\",\r\n            }}\r\n            spanid={text.id}\r\n            onClick={() => spanSelect(text.id)}\r\n          >\r\n            {text.text}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <Button variant=\"contained\" color=\"default\" onClick={getJson}>\r\n        GET JSON\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    spans: state.spans,\r\n  }),\r\n  (dispatch) => ({\r\n    onAddSpan: (spanProps) => {\r\n      dispatch({ type: \"ADD_SPAN\", payload: spanProps });\r\n    },\r\n    onDeleteSpan: (spanProps) => {\r\n      dispatch({ type: \"DELETE_SPAN\", payload: spanProps });\r\n    },\r\n    onChangeSpan: (spanProps) => {\r\n      dispatch({ type: \"CHANGE_SPAN\", payload: spanProps });\r\n    },\r\n  })\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = [\r\n  {\r\n    color: \"blue\",\r\n    bgcolor: \"green\",\r\n    fontsize: 20,\r\n    text: \"Hello world\",\r\n    id: new Date().valueOf(),\r\n  },\r\n];\r\n\r\nfunction checkArrays(state, firstIndex, secondIndex) {\r\n  let firstElem = state[firstIndex];\r\n  let secondElem = state[secondIndex];\r\n  if (\r\n    firstElem.color == secondElem.color &&\r\n    firstElem.bgcolor == secondElem.bgcolor &&\r\n    firstElem.fontsize == secondElem.fontsize\r\n  ) {\r\n    state[firstIndex].text = state[firstIndex].text + state[secondIndex].text;\r\n    state.splice(secondIndex, 1);\r\n  } else return false;\r\n}\r\n\r\nexport default function spans(state = initialState, action) {\r\n  if (action.type == \"ADD_SPAN\") {\r\n    let newState = state.concat();\r\n    newState.push(action.payload);\r\n    if (newState.length != 1) {\r\n      checkArrays(newState, newState.length - 2, newState.length - 1);\r\n    }\r\n    return [...newState];\r\n  } else if (action.type == \"DELETE_SPAN\") {\r\n    let newState = state.concat();\r\n    let indexOf = newState.findIndex((s) => s.id == action.payload);\r\n    newState.splice(indexOf, 1);\r\n    if (newState.length != 1 && indexOf != newState.length) {\r\n      checkArrays(newState, indexOf - 1, indexOf);\r\n    }\r\n    return [...newState];\r\n  } else if (action.type == \"CHANGE_SPAN\") {\r\n    let newState = state.concat();\r\n    let indexOf = newState.findIndex((s) => s.id == action.payload.id);\r\n    newState[indexOf] = {\r\n      color: action.payload.color,\r\n      bgcolor: action.payload.bgcolor,\r\n      fontsize: action.payload.fontsize,\r\n      text: action.payload.text,\r\n      id: action.payload.id,\r\n    };\r\n    if (newState.length == 1) \r\n      return [...newState];\r\n    if (indexOf == newState.length - 1) {\r\n      checkArrays(newState, indexOf - 1, indexOf);\r\n    } else if (indexOf == 0) {\r\n      checkArrays(newState, 0, 1);\r\n    } else {\r\n      if (!checkArrays(newState, indexOf, indexOf + 1)) {\r\n        checkArrays(newState, indexOf-1, indexOf);\r\n      }\r\n    }\r\n    return [...newState];\r\n  }\r\n  return state;\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport spans from \"./spans\";\r\n\r\nexport default combineReducers({\r\n    spans\r\n})","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./redux/reducers\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}